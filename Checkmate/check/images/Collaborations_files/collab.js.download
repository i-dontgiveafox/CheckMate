document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("createTeamForm");
    const groupTasks = document.querySelector(".group-tasks");
    const modal = document.getElementById("modal");
    const addMemberBtn = document.getElementById("addMemberBtn");
    const memberContainer = document.getElementById("memberContainer");

    // Ensure "+ Create Group" button opens modal
    const createGroupButton = document.querySelector("#openModalBtn") ||
        Array.from(document.querySelectorAll("button"))
            .find(btn => btn.textContent.trim() === "+ Create Group");

    if (createGroupButton) {
        createGroupButton.addEventListener("click", () => {
            modal.style.display = "flex";
        });
    }

    // Close modal when clicking outside or pressing close
    const closeBtn = document.getElementById("closeModalBtn");
    if (closeBtn) {
        closeBtn.addEventListener("click", () => {
            modal.style.display = "none";
        });
    }
    window.addEventListener("click", (e) => {
        if (e.target === modal) modal.style.display = "none";
    });

    // Handle form submission
    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(form);

        try {
            const res = await fetch("save_team.php", {
                method: "POST",
                body: formData,
            });

            const text = await res.text();
            console.log("Raw server response:", text);

            const data = JSON.parse(text);
            if (!res.ok || data.error || !data.id) {
                console.error("Error saving team:", data.error);
                return;
            }

            // Close the modal immediately
            modal.style.display = "none";

            // Create new team container dynamically
            const container = document.createElement("div");
            container.className = "team-container";
            container.style.background = data.color;

            container.innerHTML = `
                <div class="team-header">
                    <h2>${data.name}</h2>
                    <span>X</span>
                    <button class="delete-team" data-id="${data.id}">ðŸ—‘ Delete</button>
                </div>
                <div class="team-members">
                    ${data.members.length > 0
                    ? data.members.map(member => `
                            <div class="member">
                                <img src="${member.image}" alt="${member.name}" style="width:40px; height:40px; border-radius:50%;">
                                <span>${member.name}</span>
                            </div>
                        `).join("")
                    : "<p>No members added yet.</p>"
                }
                </div>
            `;

            const wrapper = document.createElement("div");
            wrapper.className = "team-wrapper";
            wrapper.appendChild(container);
            groupTasks.appendChild(wrapper);

            // Reset form fields
            form.reset();
            memberContainer.innerHTML = ""; // Clear members after submission

        } catch (err) {
            console.error("Unexpected error:", err);
        }
    });

    // Handle adding members dynamically
    addMemberBtn.addEventListener("click", () => {
        const div = document.createElement("div");
        div.className = "member-block";
        div.style.cssText = "display:flex; gap:10px; margin-bottom:10px;";

        div.innerHTML = `
            <input type="text" name="members[]" placeholder="Member Name" required style="flex:2; padding:10px;">
            <input type="file" name="member_images[]" accept="image/*" required style="flex:2;">
            <button type="button" class="removeMember" style="padding:10px;">Ã—</button>
        `;

        memberContainer.appendChild(div);
    });

    // Handle removing members dynamically
    memberContainer.addEventListener("click", (e) => {
        if (e.target.classList.contains("removeMember")) {
            e.target.parentElement.remove();
        }
    });

    // Handle deleting teams dynamically
    document.addEventListener("click", async (e) => {
        if (e.target.classList.contains("delete-team")) {
            const teamId = e.target.getAttribute("data-id");

            const res = await fetch(`delete_team.php?id=${teamId}`, { method: "DELETE" });
            const data = await res.json();

            if (!res.ok || data.error) {
                console.error("Failed to delete team:", data.error);
                return;
            }

            e.target.closest(".team-container").remove(); // Remove team from UI
        }
    });
});
